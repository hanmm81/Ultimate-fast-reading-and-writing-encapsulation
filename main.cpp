namespace FastIOstream{bool blank(char ch){return ch==' '||ch=='\n'||ch=='\r'||ch=='\t';}class instream{protected:bool iseof=false;virtual char getchar(){return EOF;}public:operator bool(){return!iseof;}template<class T>void read(T&x){double tmp=1;bool sign=0;x=0;char ch=getchar();if(ch==EOF||iseof){iseof=true;return;}for(;!isdigit(ch);ch=getchar())if(ch=='-')sign=1;for(;isdigit(ch);ch=getchar())x=x*10+(ch-'0');if(ch=='.')for(ch=getchar();isdigit(ch);ch=getchar())tmp/=10.0,x+=tmp*(ch-'0');if(sign)x=-x;}void read(char*s){char ch=getchar();if(ch==EOF||iseof){iseof=true;return;}for(;blank(ch);ch=getchar());for(;!blank(ch);ch=getchar())*s++=ch;*s=0;}void read(std::string s){char ch=getchar();if(ch==EOF||iseof){iseof=true;return;}for(;blank(ch);ch=getchar());for(;!blank(ch);ch=getchar())s.push_back(ch);}void read(char&c){c=getchar();if(c==EOF||iseof){iseof=true;return;}for(c=getchar();blank(c);c=getchar());}template<class T>friend instream&operator>>(instream&ins,T&in){ins.read(in);return ins;}};class fastinstream:public instream{protected:std::streambuf*cinbuf=std::cin.rdbuf();char inbuf[(1<<20)],*p1,*p2;char getchar(){if(p1==p2&&(p2=(p1=inbuf)+cinbuf->sgetn(inbuf,(1<<20)),p1==p2))return EOF;return*p1++;}public:void flush(){fflush(stdin);}fastinstream():p1(inbuf),p2(inbuf){}}qinf;class stdinstream:public instream{protected:char inbuf[(1<<20)],*p1,*p2;char getchar(){if(p1==p2)p2=(p1=inbuf)+fread(inbuf,1,(1<<20),stdin);return p1==p2?EOF:*p1++;}public:void flush(){fflush(stdin);}stdinstream():p1(inbuf),p2(inbuf){}}qinn;class errinstream:public instream{protected:char getchar(){return std::getchar();}}qins;struct ENDL{}endl;struct ENDS{}ends;struct FLUSH{}flush;class outstream{protected:virtual void putchar(const char&c){}public:virtual void flush(){}template<class T>void write(T x){if(x<0)x=-x,putchar('-');long long Z=x;long double R=x-Z;static int sta[35],top=0;do{sta[top++]=Z%10,Z/=10;}while(Z);while(top)putchar(sta[--top]+'0');if(R==0)return;putchar('.');R+=5e-11;for(int i=1;i<=10;i++){R*=10;putchar(int(R)+'0');R-=int(R);}}void write(char*s){for(int i=0;s[i];i++)putchar(s[i]);}void write(const char*s){for(int i=0;s[i];i++)putchar(s[i]);}void write(std::string s){for(int i=0;i<(int)s.size();i++)putchar(s[i]);}void write(char c){putchar(c);}void write(ENDL a){putchar('\n');flush();}void write(ENDS a){putchar(' ');flush();}void write(FLUSH a){flush();}template<class T>friend outstream&operator<<(outstream&outs,T out){outs.write(out);return outs;}};class fastoutstream:public outstream{protected:std::streambuf*coutbuf=std::cout.rdbuf();void putchar(const char&c){coutbuf->sputc(c);}public:void flush(){fflush(stdin);}}qoutf;class stdoutstream:public outstream{protected:char outbuf[(1<<20)],*op;void putchar(const char&c){if(op-outbuf==(1<<20))flush();*op++=c;}public:void flush(){fwrite(outbuf,1,op-outbuf,stdout);op=outbuf;}stdoutstream():op(outbuf){}~stdoutstream(){flush();}}qoutn;class erroutstream:public outstream{protected:void putchar(const char&c){std::putchar(c);}public:void flush(){fflush(stdout);}~erroutstream(){fflush(stdout);}}qouts;};using namespace FastIOstream;
